Write code to represent a project with these parts:

The very, very beginning
========================

We'll write a trivial command-line python script that does these things:

*   parse command-line options and arguments

*   log the parsed command-line options and arguments

*   make some network call to some place like facebook, reddit, or
    twitter

*   log some details from the raw HTTP request and response

*   parse the returned data

*   log whether parsing was successful

*   write some data to STDOUT



Configure logging with code
===========================

Use a logging config file to configure logging
==============================================

Web application logging
=======================

This is what I want in my logs

=============================== =======================================
Event                           How to handle
=============================== =======================================
Every stinking web request      Track it with a DEBUG level

Failed authentication attempt   Track this with INFO level

404 responses                   Accumulate all the for the data and
                                notify the team daily

500 responses                   Store the traceback and notify the team
                                immediately

=============================== =======================================

Fun with handlers
=================

Use different log levels to dispatch to different handlers.  Send
critical errors to email, debugs to stderr, info to text files.

Fun with filters
================

Use different filters so that 404 errors go one place and 500 errors go
somewhere else.

*   In the filter, use text analysis on log messages, like::

        if "404" in message:
            return True

    This is ugly because 404 might be a part of some unrelated log
    message, like a user ID.


*   Use type-checking on the log objects in the filter, like::

        if isinstance(log, My404Exception):
            return True

    Much better!  Now I just need to log stuff like this::

        try:
            handle(req)
        except Exception as ex:
            log.exception(ex)

Rotating, archiving, and shipping logs
======================================

Some popular solutions:

*   Use logrotate to archive logs.

*   Use logstash to send log files offsite.

*   Configure syslog on one box to send logs to a different box.

*   Use logstash to send logs to graylog


Viewing and aggregating and analyzing
=====================================

*   Log to a central mongodb server:
    https://github.com/andreisavu/mongodb-log

*   Use logstash to transform logs

*   Use logstash's web interface to view logs

*   Use graylog's web interface.

*   Use loggly.com's web interface

*   Use papertrailapp.com's web interface

.. vim: set syntax=rst :
