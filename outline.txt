+++++++++++++++++++
Really Good Logging
+++++++++++++++++++

Finished topics
===============

*   topics/basic-logging.txt
*   topics/basic-handlers.txt
*   topics/beyond-basic-logging.txt
*   topics/configure-logging-with-config-file.txt
*   topics/configure-logging-with-dictionary.txt
*   topics/log-uncaught-exceptions-with-sys.excepthook.txt
*   topics/multiple-logging-channels.txt
*   topics/example-log-filters.txt
*   topics/how-to-log-exceptions.txt
*   topics/rotate-your-log-files.txt
*   topics/fun-with-syslog.txt
*   topics/shipping-in-process-vs-background.txt
*   topics/privacy-and-security-issues.txt

Not yet finished
================

*   topics/mongodb.txt
*   topics/logstash.txt
*   topics/graylog.txt
*   topics/loggly.com.txt
*   topics/papertrailapp.com.txt
*   topics/sentry.txt

Ideas to write later
====================

*   What you can do with logging namespaces

*   Troubleshooting guide

    *   remove doubled log messages

*   What's up with disable_existing_loggers? Call out this annoying
    thing.

*   What does incremental=True do?

*    When to use log = logging.getLogger(__name__) vs explicit hardcoded
     name

*   Changing log levels in production

    *   update config files / code and restart
    *   use the logging listener stuff

*   Colorize those logs for fun!


Matt's opinions
===============

*   What goes in each log level

*   Good set up for a web application

*   Good cron set up

*   Good background process set up

*   What is logging NOT for

    *   reports to be distributed to end users
    *   performance data
    *   monitoring and alerts

    You might have to use what's in your log data in the short run, but
    in the long run, you're way better off building stuff just dedicated
    to these goals.

    Use the csv module if people want CSV reports.

    Use the profile module to figure out why your code is slow.

    Use some external system (like nagios, for example) to monitor
    your app.


.. vim: set syntax=rst:
